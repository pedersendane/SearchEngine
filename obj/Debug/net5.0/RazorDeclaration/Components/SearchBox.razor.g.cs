// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SearchEngine.Components
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\student\source\repos\SearchEngine\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\student\source\repos\SearchEngine\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\student\source\repos\SearchEngine\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\student\source\repos\SearchEngine\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\student\source\repos\SearchEngine\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\student\source\repos\SearchEngine\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\student\source\repos\SearchEngine\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\student\source\repos\SearchEngine\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\student\source\repos\SearchEngine\_Imports.razor"
using SearchEngine;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\student\source\repos\SearchEngine\_Imports.razor"
using SearchEngine.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\student\source\repos\SearchEngine\Components\SearchBox.razor"
using SearchEngine.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\student\source\repos\SearchEngine\Components\SearchBox.razor"
using System.Net;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\student\source\repos\SearchEngine\Components\SearchBox.razor"
using SearchEngine.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\student\source\repos\SearchEngine\Components\SearchBox.razor"
using HtmlAgilityPack;

#line default
#line hidden
#nullable disable
    public partial class SearchBox : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 124 "C:\Users\student\source\repos\SearchEngine\Components\SearchBox.razor"
       
    #region Search Variables
    // Define user search and bind it to input
    private string StringToSearch { get; set; }
    private string RedirectUrl { get; set; }
    private string SelectedSite { get; set; }

    // Define strings that can be passed in to identify which site to search
    private string GoogleSearch = "google";
    private string RedditSearch = "reddit";
    private string StackOverflowSearch = "stackoverflow";

    // Define strings to be used later in assorted functions
    private string DefaultGoogleUrl = "https://www.google.com/search?igu=1&q=";
    private string SiteExtension = "+site%3Awww.{0}.com";
    #endregion

    #region History Variables
    //Get userid and signin info
    private string UserId;
    private bool SignedIn;

    // Get User searches and categorize
    private List<SearchHistory> UserSearchHistory;
    private List<SearchResult> SearchResults;
    private IEnumerable<SearchHistory> RedditHistory = null;
    private IEnumerable<SearchHistory> StackOverflowHistory = null;
    private IEnumerable<SearchHistory> GoogleHistory = null;

    //define filters
    private IEnumerable<SearchHistory> ActiveTab;
    private string ActiveTitle;
    private bool AllSearchesActive;
    private bool RedditSearchesActive;
    private bool StackOverflowSearchesActive;
    private bool GoogleSearchesActive;
    private bool Loading;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        SignedIn = authProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated;
        UserId = authProvider.GetAuthenticationStateAsync().Result.User.Identity.Name;
        if (SignedIn)
        {
            UpdateUserSearchHistory(true);
        }

    }

    private void UpdateUserSearchHistory(bool resetFilters)
    {
        // Get all user search history and categorize it
        UserSearchHistory = historyDataAccessService.GetAllUserSearches(UserId);
        RedditHistory = UserSearchHistory.Where(x => x.Site.ToLower().Equals("reddit"));
        StackOverflowHistory = UserSearchHistory.Where(x => x.Site.ToLower().Equals("stackoverflow"));
        GoogleHistory = UserSearchHistory.Where(x => x.Site.ToLower().Equals("google"));
        if (resetFilters)
        {
            if (UserSearchHistory != null)
            {
                UpdateSearchHistoryFilters(UserSearchHistory, true, false, false, false);
            }

        }

    }

    private void UpdateSearchHistoryFilters(IEnumerable<SearchHistory> activeHistory, bool all, bool reddit, bool stack, bool google)
    {
        ActiveTab = activeHistory;
        AllSearchesActive = all;
        RedditSearchesActive = reddit;
        StackOverflowSearchesActive = stack;
        GoogleSearchesActive = google;
        if (all)
        {
            ActiveTitle = "All Searches";
        }
        else if (reddit)
        {
            ActiveTitle = "Reddit Searches";
        }
        else if (stack)
        {
            ActiveTitle = "StackOverflow Searches";
        }
        else if (google)
        {
            ActiveTitle = "Google Searches";
        }
    }

    private async Task HandleSearch(string typeOfSearch)
    {
        RedirectUrl = "";
        //If user enters something
        if (!string.IsNullOrWhiteSpace(StringToSearch))
        {
            Loading = true;
            string finalUrl = FormatSearchHistoryLink(StringToSearch, typeOfSearch);

            var htmlWeb = new HtmlWeb();
            var query = finalUrl;
            var doc = await htmlWeb.LoadFromWebAsync(query);

            var response = doc.DocumentNode.ChildNodes.Last();
            var results = response.SelectNodes("//div[@class='g']");
            if (results == null)
            {
                return;
            }
            var searchResults = new List<SearchResult>();
            foreach (var result in results)
            {
                var description = result.InnerText;
                var refNode = result.Element("div").Element("div").Element("div").Element("a");
                var url = refNode.Attributes["href"].Value;
                var text = refNode.InnerText;
                searchResults.Add(new SearchResult(text, url, description));
            }
            SearchResults = searchResults.ToList();
            SelectedSite = typeOfSearch;
            RedirectUrl = finalUrl;
            Loading = false;
            if (SignedIn)
            {
                SearchHistory search = new SearchHistory();
                search.UserId = UserId;
                search.SearchTerm = StringToSearch;
                search.Site = SelectedSite;
                await historyDataAccessService.InsertSearchHistoryAsync(search);
            }
        }
    }



    private async void DeleteSearchHistoryLink(SearchHistory search)
    {
        await historyDataAccessService.DeleteSearchAsync(search);
        UpdateUserSearchHistory(false);
    }

    private string FormatSearchHistoryLink(string searchTerm, string site)
    {
        // Make search string url friendly, and format return string
        string CleanedUserSearchTerm = WebUtility.UrlEncode(searchTerm);
        string finalUrl = String.Format("{0}{1}", DefaultGoogleUrl, CleanedUserSearchTerm);
        if (site != "google")
        {
            finalUrl += String.Format("+site%3Awww.{0}.com", site);
        }
        return finalUrl;
    }

    private string AddActiveClass(bool active)
    {
        string returnString = "";
        if (active)
        {
            returnString = "active";
        }
        return returnString;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HistoryDataAccessService historyDataAccessService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider authProvider { get; set; }
    }
}
#pragma warning restore 1591
